# Purpose:
#   Demonstrate use of oauth-proxy in an OpenShift Container Platform environment
#   More information about oauth-proxy can be found here: https://github.com/openshift/oauth-proxy/
#
# Notes:
#     1) This app makes use of a kubernetes Deployment (and subsequently a ReplicaSet) instead of a DC (and subsequently a RC)
#     2) Flow
#        a) user-agent makes request to secured route hostname:
#           - request: 
#               - URL       :  https://proxy-myproject.apps.jbrideratwater.com/
#               - Method    :  GET
#           - response:
#               - status    : 403
#
#        b) "Sign in with an OpenShift account" button is clicked:
#
#         1 - request : 
#               URL         :   https://proxy-myproject.apps.jbrideratwater.com/oauth/start?rd=/
#               Method      :   GET
#           - response:
#               - status    :   302
#               - Header    :   Location:   https://jbrideratwater.com:8443/oauth/authorize
#
#         2 - request
#               URL         :   https://jbrideratwater.com:8443/oauth/authorize
#               Params      :   approval_prompt	force
#                               client_id	system:serviceaccount:myproject:proxy
#                               redirect_uri	https://proxy-myproject.apps.j…deratwater.com/oauth/callback
#                               response_type	code
#                               scope	        user:info+user:check-access
#                               state	        e86dfb9da7a5298f53dbf2ca64daef97:/
#
#           - response      
#               - status    :   302
#               - Header    :   Location:   /login
#
#
#         3  - request
#               URL         :   https://jbrideratwater.com:8443/login
#               Params      :   then: /oauth/authorize?approval_prompt=force&client_id=system%3Aserviceaccount%3Amyproject%3Aproxy&redirect_uri=https%3A%2F%2Fproxy-myproject.apps.jbrideratwater.com%2Foauth%2Fcallback&response_type=code&scope=user%3Ainfo+user%3Acheck-access&state=cfa7068b44389f486fe9f6ffdb9756ff%3A%2F
#
#           - response      
#               - status    :   200           
#
#        c)  userId and password is entered and submitted via user-agent
#
#         1 request
#               URL         :   https://jbrideratwater.com:8443/login
#               Params      :   then	/oauth/authorize?approval_prom…4389f486fe9f6ffdb9756ff%3A%2F
#                               csrf	5aba1d5d-d639-11e7-8874-9cb6d0197607
#                               username	developer
#                               password	developer
#
#           response
#               status      :   302
#               Header      :   location:   /oauth/authorize?approval_prompt=force&client_id=system%3Aserviceaccount%3Amyproject%3Aproxy&redirect_uri=https%3A%2F%2Fproxy-myproject.apps.jbrideratwater.com%2Foauth%2Fcallback&response_type=code&scope=user%3Ainfo+user%3Acheck-access&state=cfa7068b44389f486fe9f6ffdb9756ff%3A%2F
#
#         2 request
#               URL         :   https://jbrideratwater.com:8443/oauth/authorize
#               Params      :   approval_prompt	force
#                               client_id	system:serviceaccount:myproject:proxy
#                               redirect_uri	https://proxy-myproject.apps.j…deratwater.com/oauth/callback
#                               response_type	code
#                               scope	user:info+user:check-access
#                               state	cfa7068b44389f486fe9f6ffdb9756ff:/
#
#           response
#               status      :   302
#               Params      :   Location: https://proxy-myproject.apps.jbrideratwater.com/oauth/callback?code=6kE89vfswYc7fjJtNduMsFhm78ew5xcXO7FJyBclYFU&state=cfa7068b44389f486fe9f6ffdb9756ff%3A%2F
#
#
#       3 request
#               URL         :   https://proxy-myproject.apps.jbrideratwater.com/oauth/callback?code=6kE89vfswYc7fjJtNduMsFhm78ew5xcXO7FJyBclYFU&state=cfa7068b44389f486fe9f6ffdb9756ff:/
#
#         response
#               status      :   302
#               Params      :   Location: /
#
#       4 request
#               URL         :   https://proxy-myproject.apps.jbrideratwater.com/
#
#         response
#               status      :   200
#               Body        :   Hello OpenShift!
#
#
#
# Questions:
#       1) What is the purpose of each of the 4 secrets created by this app ???
#       2) Why does the SA reference two of the secrets ???
#       3) oauth-proxy specifies an "upstream" of:  http://localhost:8080  .  How is this URL resolvable from the sidecar ?


kind: List
apiVersion: v1
items:



# Create a proxy service account and ensure it will use the route "proxy"
# This ServiceAccount acts as a type of constrained "OAuthClient" to the OCP master API
# client_id will be     :   system:serviceaccount:oauth-proxy-test:proxy
# client_secret will be :   in /var/run/secrets/kubernetes.io/serviceaccount/token
# redirect-uri will be  :   ???     
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: proxy
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"proxy"}}'



# Create a secure connection to the proxy via a route
# JA Bride:   
#   - The reason why this route specifies Reencrypt termination is because:
#   - Because the route will expose a service secured via a "service signing certificate", the "destinationCACertificate" field is not omitted.
#   - The OCP router will automatically leverage the CA bundle generated for service serving certificates injected into every pod at:
#           /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: proxy
  spec:
    to:
      name: proxy
    tls:
      termination: Reencrypt



# JA Bride: 
#   1) The OCP router invokes this service 
#   2) This service load-balances to pods that have a label of:  app=proxy
#   3) This is a service that is secured using "Service Serving Certificate Secrets"
#        - https://docs.openshift.org/latest/dev_guide/secrets.html#service-serving-certificate-secrets
#      The OCP cluster generates the signed certificate/key pair into a secret in the project's namespace that will be called: proxy-tls
#   4) Clients in the same OCP cluster as this service can validate the CA of these service certificates via the OCP CA bundle automatically installed in each pod at:
#        /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
- apiVersion: v1
  kind: Service
  metadata:
    name: proxy
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: proxy-tls
  spec:
    ports:
    - name: proxy
      port: 443
      targetPort: 8443
    selector:
      app: proxy



# Launch a proxy as a sidecar
# This deployment establishes a pod with two containers:
#    a) openshift/helloworld (port 8080)
#    b) oauth-proxy sidecar that secures the helloworld app (listens on port 8443 (https) and 4180 (http) )
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: proxy
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: proxy
    template:
      metadata:
        labels:
          app: proxy
      spec:
        serviceAccountName: proxy
        containers:
#       1) Sidecar container has two volumes mounted to it: 
#           a) proxy-tls            
#               - containes OCP generated service certificates; 
#               - automatically mounted to sidecar at: /etc/tls/private
#           b) proxy-token-<id>    
#               - based on a secret with the 4 typical files found at: /var/run/secrets/kubernetes.io/serviceaccount
        - name: oauth-proxy
          image: openshift/oauth-proxy:v1.0.0
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 8443
            name: public
          args:
          - --https-address=:8443
          - --provider=openshift
          - --openshift-service-account=proxy
          - --upstream=http://localhost:8080
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret=SECRET
          volumeMounts:
          - mountPath: /etc/tls/private
            name: proxy-tls

        - name: app
          image: openshift/hello-openshift:latest
        volumes:
        - name: proxy-tls
          secret:
            secretName: proxy-tls
